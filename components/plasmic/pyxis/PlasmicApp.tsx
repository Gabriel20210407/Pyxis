// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ujjYdWMUfC69RDjGJ3P7gT
// Component: IhqKTaKPhj
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Switch from "../../Switch"; // plasmic-import: JMDo9WR11mn/component
import Select__Overlay from "../../Select__Overlay"; // plasmic-import: dsvCyR9cW7T/component
import Checkbox from "../../Checkbox"; // plasmic-import: FQfuE_bu4a6/component
import Button from "../../Button"; // plasmic-import: 9S3piU8qHY8/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_pyxis.module.css"; // plasmic-import: ujjYdWMUfC69RDjGJ3P7gT/projectcss
import sty from "./PlasmicApp.module.css"; // plasmic-import: IhqKTaKPhj/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: yoLHiFnzx3K/icon
import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: D3fPqfO2CRl/icon
import TapesvgIcon from "./icons/PlasmicIcon__Tapesvg"; // plasmic-import: Oh3QK7JZTP/icon
import SplitIcon from "./icons/PlasmicIcon__Split"; // plasmic-import: DC-l7hdPE/icon
import TimeBarIcon from "./icons/PlasmicIcon__TimeBar"; // plasmic-import: EPYX2Wrt5/icon
import FilterIcon from "./icons/PlasmicIcon__Filter"; // plasmic-import: rE-ItDvC1b/icon
import MergeIcon from "./icons/PlasmicIcon__Merge"; // plasmic-import: emdl2zFGL/icon

export type PlasmicApp__VariantMembers = {};

export type PlasmicApp__VariantsArgs = {};
type VariantPropType = keyof PlasmicApp__VariantsArgs;
export const PlasmicApp__VariantProps = new Array<VariantPropType>();

export type PlasmicApp__ArgsType = {
  children?: React.ReactNode;
};

type ArgPropType = keyof PlasmicApp__ArgsType;
export const PlasmicApp__ArgProps = new Array<ArgPropType>("children");

export type PlasmicApp__OverridesType = {
  root?: p.Flex<"div">;
  chart?: p.Flex<"div">;
  verticalStack?: p.Flex<"div">;
  statusBar?: p.Flex<"div">;
  _switch?: p.Flex<typeof Switch>;
  viewport?: p.Flex<"div">;
  columns?: p.Flex<"div">;
  overlay?: p.Flex<typeof Select__Overlay>;
  actionsMenu?: p.Flex<"div">;
  button?: p.Flex<typeof Button>;
  splitNode?: p.Flex<typeof Button>;
  showTimebar?: p.Flex<typeof Button>;
  showFilters?: p.Flex<typeof Button>;
  mergeNodes?: p.Flex<typeof Button>;
  timebar?: p.Flex<"div">;
};

export interface DefaultAppProps {}

function PlasmicApp__RenderFunc(props: {
  variants: PlasmicApp__VariantsArgs;
  args: PlasmicApp__ArgsType;
  overrides: PlasmicApp__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"chart"}
            data-plasmic-override={overrides.chart}
            className={classNames(projectcss.all, sty.chart)}
          >
            <div
              data-plasmic-name={"verticalStack"}
              data-plasmic-override={overrides.verticalStack}
              className={classNames(projectcss.all, sty.verticalStack)}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"statusBar"}
                data-plasmic-override={overrides.statusBar}
                hasGap={true}
                className={classNames(projectcss.all, sty.statusBar)}
              >
                <Switch
                  data-plasmic-name={"_switch"}
                  data-plasmic-override={overrides._switch}
                  className={classNames("__wab_instance", sty._switch)}
                >
                  {p.renderPlasmicSlot({
                    defaultContents: "Auto Analysis",
                    value: args.children,
                    className: classNames(sty.slotTargetChildren)
                  })}
                </Switch>

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__lyQ7
                  )}
                >
                  {"Level : 1"}
                </div>

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__xEfjx
                  )}
                >
                  {"Segregators : Location, Medium"}
                </div>

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__gOobY
                  )}
                >
                  {"Start : 07 Jan 2019"}
                </div>

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__frlf9
                  )}
                >
                  {"End : 21 Dec 2022"}
                </div>

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__godWc
                  )}
                >
                  {"Filters : OFF"}
                </div>
              </p.Stack>

              <div
                data-plasmic-name={"viewport"}
                data-plasmic-override={overrides.viewport}
                className={classNames(projectcss.all, sty.viewport)}
              >
                <div
                  data-plasmic-name={"columns"}
                  data-plasmic-override={overrides.columns}
                  className={classNames(projectcss.all, sty.columns)}
                >
                  <div className={classNames(projectcss.all, sty.column__raK1)}>
                    <Select__Overlay
                      data-plasmic-name={"overlay"}
                      data-plasmic-override={overrides.overlay}
                      className={classNames("__wab_instance", sty.overlay)}
                    />
                  </div>

                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.column__hh1Gd)}
                  >
                    <Checkbox
                      className={classNames(
                        "__wab_instance",
                        sty.checkbox__ay40L
                      )}
                    />

                    <Checkbox
                      className={classNames(
                        "__wab_instance",
                        sty.checkbox__s5L1Z
                      )}
                    />

                    <Checkbox
                      className={classNames(
                        "__wab_instance",
                        sty.checkbox__sWXiz
                      )}
                    />

                    <Checkbox
                      className={classNames(
                        "__wab_instance",
                        sty.checkbox___2TApR
                      )}
                    />
                  </p.Stack>
                </div>
              </div>
            </div>

            <p.Stack
              as={"div"}
              data-plasmic-name={"actionsMenu"}
              data-plasmic-override={overrides.actionsMenu}
              hasGap={true}
              className={classNames(projectcss.all, sty.actionsMenu)}
            >
              <Button
                data-plasmic-name={"button"}
                data-plasmic-override={overrides.button}
                className={classNames("__wab_instance", sty.button)}
              >
                <TapesvgIcon
                  className={classNames(projectcss.all, sty.svg__zqaFu)}
                  role={"img"}
                />
              </Button>

              <Button
                data-plasmic-name={"splitNode"}
                data-plasmic-override={overrides.splitNode}
                className={classNames("__wab_instance", sty.splitNode)}
              >
                <SplitIcon
                  className={classNames(projectcss.all, sty.svg__arv7Q)}
                  role={"img"}
                />
              </Button>

              <Button
                data-plasmic-name={"showTimebar"}
                data-plasmic-override={overrides.showTimebar}
                className={classNames("__wab_instance", sty.showTimebar)}
              />

              <Button
                data-plasmic-name={"showFilters"}
                data-plasmic-override={overrides.showFilters}
                className={classNames("__wab_instance", sty.showFilters)}
              >
                <FilterIcon
                  className={classNames(projectcss.all, sty.svg___7JG8Z)}
                  role={"img"}
                />
              </Button>

              <Button
                data-plasmic-name={"mergeNodes"}
                data-plasmic-override={overrides.mergeNodes}
                className={classNames("__wab_instance", sty.mergeNodes)}
              >
                <MergeIcon
                  className={classNames(projectcss.all, sty.svg__jCn1Y)}
                  role={"img"}
                />
              </Button>
            </p.Stack>
          </div>

          <div
            data-plasmic-name={"timebar"}
            data-plasmic-override={overrides.timebar}
            className={classNames(projectcss.all, sty.timebar)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "chart",
    "verticalStack",
    "statusBar",
    "_switch",
    "viewport",
    "columns",
    "overlay",
    "actionsMenu",
    "button",
    "splitNode",
    "showTimebar",
    "showFilters",
    "mergeNodes",
    "timebar"
  ],
  chart: [
    "chart",
    "verticalStack",
    "statusBar",
    "_switch",
    "viewport",
    "columns",
    "overlay",
    "actionsMenu",
    "button",
    "splitNode",
    "showTimebar",
    "showFilters",
    "mergeNodes"
  ],
  verticalStack: [
    "verticalStack",
    "statusBar",
    "_switch",
    "viewport",
    "columns",
    "overlay"
  ],
  statusBar: ["statusBar", "_switch"],
  _switch: ["_switch"],
  viewport: ["viewport", "columns", "overlay"],
  columns: ["columns", "overlay"],
  overlay: ["overlay"],
  actionsMenu: [
    "actionsMenu",
    "button",
    "splitNode",
    "showTimebar",
    "showFilters",
    "mergeNodes"
  ],
  button: ["button"],
  splitNode: ["splitNode"],
  showTimebar: ["showTimebar"],
  showFilters: ["showFilters"],
  mergeNodes: ["mergeNodes"],
  timebar: ["timebar"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  chart: "div";
  verticalStack: "div";
  statusBar: "div";
  _switch: typeof Switch;
  viewport: "div";
  columns: "div";
  overlay: typeof Select__Overlay;
  actionsMenu: "div";
  button: typeof Button;
  splitNode: typeof Button;
  showTimebar: typeof Button;
  showFilters: typeof Button;
  mergeNodes: typeof Button;
  timebar: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicApp__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicApp__VariantsArgs;
    args?: PlasmicApp__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicApp__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicApp__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicApp__ArgProps,
      internalVariantPropNames: PlasmicApp__VariantProps
    });

    return PlasmicApp__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicApp";
  } else {
    func.displayName = `PlasmicApp.${nodeName}`;
  }
  return func;
}

export const PlasmicApp = Object.assign(
  // Top-level PlasmicApp renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    chart: makeNodeComponent("chart"),
    verticalStack: makeNodeComponent("verticalStack"),
    statusBar: makeNodeComponent("statusBar"),
    _switch: makeNodeComponent("_switch"),
    viewport: makeNodeComponent("viewport"),
    columns: makeNodeComponent("columns"),
    overlay: makeNodeComponent("overlay"),
    actionsMenu: makeNodeComponent("actionsMenu"),
    button: makeNodeComponent("button"),
    splitNode: makeNodeComponent("splitNode"),
    showTimebar: makeNodeComponent("showTimebar"),
    showFilters: makeNodeComponent("showFilters"),
    mergeNodes: makeNodeComponent("mergeNodes"),
    timebar: makeNodeComponent("timebar"),

    // Metadata about props expected for PlasmicApp
    internalVariantProps: PlasmicApp__VariantProps,
    internalArgProps: PlasmicApp__ArgProps
  }
);

export default PlasmicApp;
/* prettier-ignore-end */
